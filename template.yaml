AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  noties

  Sample SAM Template for noties

Parameters:
  DomainName:
    Type: String
    Description: The domain name we are using in the environment
    Default: nickswiss.io

Globals:
  Function:
    Timeout: 3

Resources:
  SubdomainHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Sub 'noties.${DomainName}'

  EventsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      Cors:
        AllowMethods: "'POST, GET'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: SHARED
          UsagePlanName: !Sub '${AWS::StackName}-events-api-usage-plan'
      Domain:
        CertificateArn: !Ref NotiesSubdomainCertificate
        Route53:
          HostedZoneName: !Sub 'noties.${DomainName}.' # workaround https://github.com/aws/serverless-application-model/issues/1539 (notice period at end)
        DomainName: !Sub 'events.noties.${DomainName}'
        EndpointConfiguration: EDGE
        SecurityPolicy: TLS_1_2

  EmailHistoryEvents:
    Type: AWS::SQS::Queue

  # Define the publisher Lambda function with permissions
  EmailHistoryEventsPublisherFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/email_history_events_publisher/
      Handler: app.lambda_handler
      Runtime: python3.8
      Timeout: 3
      MemorySize: 128
      Environment:
        Variables:
          SQS_ARN: !Ref EmailHistoryEvents
      Policies:
        ## Read more about SAM Policy templates at:
        ## https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - SQSSendMessagePolicy:
            QueueName: !GetAtt EmailHistoryEvents.QueueName
      Events:
        EmailHistoryPublisher:
          Type: Api
          Properties:
            Path: /email-history
            Method: post
            RestApiId: !Ref EventsApi
      Layers:
        - !Ref ProjectSharedLibs

  EmailHistoryEventsPublisherFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${EmailHistoryEventsPublisherFunction}"
      RetentionInDays: 7

  EmailHistoryEventsConsumer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/email_worker/
      Handler: app.lambda_handler
      Runtime: python3.8
      Timeout: 30
      Environment:
        Variables:
          AUTH_DB: !Ref AuthDb
          EMAIL_DB: !Ref EmailDb
          GMAIL_OAUTH_SECRET: 'noties/gmail_oauth'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AuthDb
        - DynamoDBCrudPolicy:
            TableName: !Ref EmailDb
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:noties/*"
      Events:
        EmailHistoryEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EmailHistoryEvents.Arn
            BatchSize: 1
      Layers:
        - !Ref ProjectSharedLibs

  EmailHistoryEventsConsumerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${EmailHistoryEventsConsumer}"
      RetentionInDays: 7

  ###### OAuth Apis #######

  NotiesSubdomainCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub 'noties.${DomainName}'
      SubjectAlternativeNames:
        - !Sub '*.noties.${DomainName}'
      ValidationMethod: DNS
      DomainValidationOptions:  # TODO: Investigate here <--
        - DomainName: !Sub 'noties.${DomainName}'
          HostedZoneId: !Ref SubdomainHostedZone

  OAuthApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      Cors:
        AllowMethods: "'POST, GET'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        UsagePlan:
          CreateUsagePlan: SHARED
          UsagePlanName: !Sub '${AWS::StackName}-api-usage-plan'
      Domain:
        CertificateArn: !Ref NotiesSubdomainCertificate
        Route53:
          HostedZoneId: !Ref SubdomainHostedZone  # workaround https://github.com/aws/serverless-application-model/issues/1539 must be different compared with events api r53
        DomainName: !Sub 'oauth.noties.${DomainName}'
        EndpointConfiguration: EDGE
        SecurityPolicy: TLS_1_2

  OAuthForm:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/oauth_form/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          GMAIL_OAUTH_SECRET: 'noties/gmail_oauth'
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:noties/*"
      Layers:
        - !Ref ProjectSharedLibs
      Events:
        OAuthForm:
          Type: Api
          Properties:
            Path: /form
            Method: get
            RestApiId: !Ref OAuthApi

  OAuthSubmit:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/oauth_submit/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          DOMAIN_NAME: !Sub 'oauth.noties.${DomainName}'
          GMAIL_OAUTH_SECRET: 'noties/gmail_oauth'
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:noties/*"
      Layers:
        - !Ref ProjectSharedLibs
      Events:
        AddSiteApi:
          Type: Api
          Properties:
            Path: /submit
            Method: post
            RestApiId: !Ref OAuthApi

  OAuthCallback:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/oauth_callback/
      Handler: app.lambda_handler
      Runtime: python3.8
      Timeout: 10
      Environment:
        Variables:
          OAUTHLIB_RELAX_TOKEN_SCOPE: 1
          DOMAIN_NAME: !Sub 'oauth.noties.${DomainName}'
          GMAIL_OAUTH_SECRET: 'noties/gmail_oauth'
          AUTH_DB: !Ref AuthDb
          EMAIL_DB: !Ref EmailDb
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AuthDb
        - DynamoDBCrudPolicy:
            TableName: !Ref EmailDb
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:noties/*"
      Layers:
        - !Ref ProjectSharedLibs
      Events:
        AddSiteApi:
          Type: Api
          Properties:
            Path: /callback
            Method: get
            RestApiId: !Ref OAuthApi

  AuthDb:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub '${AWS::StackName}-authdb'
      PrimaryKey:
        Name: email
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  EmailDb:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub '${AWS::StackName}-emaildb'
      PrimaryKey:
        Name: email
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  #######################################
  # Lambda Layers (Shared Libraries)
  #######################################
  ProjectSharedLibs:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/shared/libs/
      CompatibleRuntimes:
        - python3.8
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: python3.8

#Outputs:
#  HelloEfsApi:
#    Description: "API Gateway endpoint URL for Prod stage for Hello EFS function"
#    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"

